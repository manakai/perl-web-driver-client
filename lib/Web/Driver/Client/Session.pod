XXX

=over 4

=item $promise = $session->go ($url)

Navigate to the browsing context to a URL (the Go command).

The first argument must be a URL object (L<Web::URL>).

It returns a promise (L<Promise>) that is to be resolved when the
WebDriver command returns (or to be rejected with an error).

=item $session->url->then (sub { $url = shift })

Get the current document URL of the browsing context (the Get Current
URL command).

It returns a promise (L<Promise>) that is to be resolved with a URL
object (L<Web::URL>) when the URL is obtained (or to be rejected with
an error).

=item $session->get_all_cookies->then (sub { $cookies = shift })

=item $session->get_cookie ($name)->then (sub { $cookies = shift })

Get all cookies, or get cookies by name.

For the C<get_cookie> method, the first argument must be a character
string of the cookie name.

It returns a promise (L<Promise>) that is to be resolved with an array
reference of zero or more hash references representing cookies (or to
be rejected with an error).  Even the C<get_cookie> method can return
multiple values when there are multiple cookies with same names.  A
cookie has following name/value pairs:

=over 4

=item name => $string

The cookie name.

=item value => $string

The cookie value.

=item domain => $string

The cookie's domain.

=item path => $string

The cookie's path.

=item secure => $boolean

Whether the cookie has the C<Secure> attribute or not.

=item httponly => $boolean

Whether the cookie has the C<HttpOnly> attribute or not.

=back

=item $promise = $session->set_cookie ($name, $value, $optname => $optvalue, ...)

Set a cookie.

The first argument must be a character string of the cookie name.

The second argument must be a character string of the cookie value.

The remaining arguments are zero or more name/value pairs specifying
following options:

=over 4

=item domain => $string

A character string of the C<Domain> attribute value.

=item path => $string

A character string of the C<Path> attribute value.

=item secure => $boolean

Whether the cookie has the C<Secure> attribute or not.

=item httponly => $boolean

Whether the cookie has the C<HttpOnly> attribute or not.  Note that
some WebDriver server implementations do not support this option.

=item max_age => $delta_seconds

The number of seconds specified in the C<Max-Age> attribute value.

=back

Note that C<$name>, C<$value>, and C<domain> and C<path> values must
be valid values.  Unsafe user input should not be specified.

It returns a promise (L<Promise>) that is to be resolved after the
cookie has been set (or to be rejected with an error).

=item $session->execute ($script, [$arg1, $arg2, ...], $name => $value, ...)->then (sub { $res = shift })

Run a script (the Execute Script comment).

The first argument must be a character string of the JavaScript
classic script code.

The script may return a JavaScript C<Promise>, in which case the
response is returned after the resolution or rejection of that
promise.  (If the WebDriver server does not support this feature, this
module falls back to the Execute Async Script command transparently.)

The second argument is an array reference of zero or more arguments to
the script.  They can be accessed via the C<arguments> object in the
script.  This argument can be omitted.  The default is an empty
argument list.

The remaining arguments can be zero or more name/value pairs from
following options:

=over 4

=item timeout => $seconds

Timeout in seconds.  The default value is 30s.  Note that some
WebDriver server ignores this option.

=back

It returns a promise (L<Promise>) that is to be resolved with the
(non-error) response (L<Web::Driver::Client::Response>) object (or to
be rejected with an error).  The return value of the script (or the
returned promise's resolved value), if any, can be accessed by C<<
$res->json->{value} >>.

=item $session->inner_html (selector => $selector)->then (sub { $html = shift })

Get the serialization (i.e. C<innerHTML>).

Zero or more options can be specified as name/value pair arguments.

If the C<selector> option is specified, the content of the element
selected by the value is serialized.  The value must be a character
string of the group of selectors.  Otherwise, the document element
(including it self) is serialized.

it returns a promise (L<Promise>) that is to be resolved with the
character string of the serialization, if C<selector> selects an
element or no C<selector> option is specified, or with C<undef> if
C<selector> selects no element (or to be rejected with an error).

=item $session->text_content (selector => $selector)->then (sub { $text = shift })

Get the text content (i.e. C<textContent>).

Zero or more options can be specified as name/value pair arguments.

If the C<selector> option is specified, the element selected by the
value is used.  The value must be a character string of the group of
selectors.  Otherwise, the document element is used.

it returns a promise (L<Promise>) that is to be resolved with the
character string of the text content, if C<selector> selects an
element or no C<selector> option is specified, or with C<undef> if
C<selector> selects no element (or to be rejected with an error).

=item $session->screenshot ($name => $value, ...)->then (sub { $bytes = shift })

Take a screenshot (the Take Screenshot and Take Element Screenshot
commands).

Zero or more options can be specified as name/value pair arguments.

If the C<element> option is specified, an element screenshot of the
element is taken.  The value must be a Web element hash reference.

Otherwise, if the C<selector> option is specified, an element
screenshot of the element selected by the value is taken.  The value
must be a character string of the group of selectors.

Otherwise, a window screenshot is taken.

If the WebDriver server does not support Take Element Screenshot
command, C<element> and C<selector> options are ignored and fallbacked
to the window screenshot.

It returns a promise (L<Promise>) that is to be resolved with the byte
string of the screenshot image data (or to be rejected with an error).

=item $promise = $session->set_window_dimension ($width, $height)

Set the window's width and height.  The first argument must be the
number of pixels of the window's width.  The second argument must be
the number of pixels of the window's height.

It returns a promise (L<Promise>) that is to be resolved when the
request is processed.

=item $promise = $session->switch_to_frame_by_selector ($selector)

Select a browsing context (the Switch To Frame command).

The first argument must be a character string of the group of
selectors used to select an C<iframe> element.

It returns a promise (L<Promise>) that is to be resolved when a
browsing context is selected (or to be rejected with an error).

=item $session->click ($element)->then (sub { ... })

Click an element.

The first argument must be a hash reference representing a Web
element.

It returns a promise (L<Promise>) that is to be resolved when the
action is done.

=item $session->http_get ($path_segments)->then (sub { $res = shift })

Send a command using the session with the HTTP C<GET> method.

The first argument must be an array reference of path segments.
Segments C<session> and the session ID is prepended before these
segments to construct the request URL.

It returns a promise (L<Promise>) that is to be resolved with a
L<Web::Driver::Client::Response> object containing the response to the
request (or to be rejected with an error).

=item $session->http_post ($path_segments, $params)->then (sub { $res = shift })

Send a command using the session with the HTTP C<POST> method.

The first argument must be an array reference of path segments.
Segments C<session> and the session ID is prepended before these
segments to construct the request URL.

The second argument must be a hash reference that can be used to
create the payload body's JSON data.

It returns a promise (L<Promise>) that is to be resolved with a
L<Web::Driver::Client::Response> object containing the response to the
request (or to be rejected with an error).

=item $session->http_delete ($path_segments)->then (sub { $res = shift })

Send a command using the session with the HTTP C<DELETE> method.

The first argument must be an array reference of path segments.
Segments C<session> and the session ID is prepended before these
segments to construct the request URL.

It returns a promise (L<Promise>) that is to be resolved with a
L<Web::Driver::Client::Response> object containing the response to the
request (or to be rejected with an error).

=item $promise = $session->close

Delete the session from the WebDriver server (the Delete Session
command).

It returns a promise (L<Promise>) that is to be resolved when the
server returns (or to be rejected with an error).

This method must be explicitly invoked when the session is no longer
used.

=back

=head1 SEE ALSO

L<Web::Driver::Connection>.

=head1 SPECIFICATIONS

WebDriver <https://w3c.github.io/webdriver/webdriver-spec.html>.

JsonWireProtocol - selenium - A description of the protocol used by
WebDriver to communicate with remote instances - Browser automation
framework
<https://web.archive.org/web/20160205035909/https://code.google.com/p/selenium/wiki/JsonWireProtocol>.

=head1 AUTHOR

Wakaba <wakaba@suikawiki.org>

=head1 ACKNOWLEDGEMENTS

Thanks to nobuoka.

=head1 LICENSE

Copyright 2016-2020 Wakaba <wakaba@suikawiki.org>.

Copyright 2017 OND Inc. <https://ond-inc.com/>.

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=cut
